DROP DATABASE IF EXISTS qna;

CREATE DATABASE qna;

\c qna;

-- Initiate questions table

CREATE TABLE IF NOT EXISTS questions_temp (
  id integer,
  product_id integer,
  body text,
  date_written bigint,
  asker_name varchar(50),
  asker_email varchar(255),
  reported boolean,
  helpful integer
);

COPY questions_temp
FROM '/Users/mtanaka/HackReactor/SDC_data/questions.csv'
DELIMITER ','
CSV HEADER;

CREATE TABLE IF NOT EXISTS questions (
  question_id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  product_id integer,
  question_body text,
  question_date bigint,
  asker_name varchar(50),
  asker_email varchar(255),
  reported boolean,
  question_helpfulness integer
);

INSERT INTO questions (product_id, question_body, question_date, asker_name, asker_email, reported, question_helpfulness)
SELECT product_id, body, date_written, asker_name, asker_email, reported, helpful
FROM questions_temp;

CREATE INDEX idx_questions_productid ON questions(product_id);

DROP TABLE questions_temp;

-- Initiate answers table

CREATE TABLE IF NOT EXISTS answers_temp (
  id integer,
  question_id integer,
  body text,
  date_written bigint,
  answerer_name varchar(50),
  answerer_email varchar(255),
  reported boolean,
  helpful integer,
  FOREIGN KEY (question_id) REFERENCES questions (question_id)
);

COPY answers_temp
FROM '/Users/mtanaka/HackReactor/SDC_data/answers.csv'
DELIMITER ','
CSV HEADER;

CREATE TABLE IF NOT EXISTS answers (
  answer_id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  question_id integer,
  body text,
  date bigint,
  answerer_name varchar(50),
  answerer_email varchar(255),
  reported boolean,
  helpfulness integer,
  FOREIGN KEY (question_id) REFERENCES questions (question_id)
);

INSERT INTO answers (question_id, body, date, answerer_name, answerer_email, reported, helpfulness)
SELECT question_id, body, date_written, answerer_name, answerer_email, reported, helpful
FROM answers_temp;

CREATE INDEX idx_answers_questionid ON answers(question_id);

DROP TABLE answers_temp;

-- Initiate answers_photo table

CREATE TABLE IF NOT EXISTS answers_photos_temp (
  id integer,
  answer_id int,
  photo_url text,
  FOREIGN KEY (answer_id) REFERENCES answers (answer_id)
);

COPY answers_photos_temp
FROM '/Users/mtanaka/HackReactor/SDC_data/answers_photos.csv'
DELIMITER ','
CSV HEADER;

CREATE TABLE IF NOT EXISTS answers_photos (
  id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  answer_id int,
  url text,
  FOREIGN KEY (answer_id) REFERENCES answers (answer_id)
);

INSERT INTO answers_photos (answer_id, url)
SELECT answer_id, photo_url
FROM answers_photos_temp;

CREATE INDEX idx_answers_photos_answerid ON answers_photos(answer_id);

DROP TABLE answers_photos_temp;



-- tells us that the output of to_stamp is "timestamp with timezone"
-- SELECT PG_TYPEOF(TO_TIMESTAMP(1599958385988::double precision/1000));

-- SELECT TO_CHAR(TO_TIMESTAMP(date::double precision/1000), 'DD-MM-YYYY"T"HH24:MI:SS.MS"Z"') AS date_converted FROM answers WHERE answer_id='1';


-- INSERT INTO questions (product_id, question_body, question_date, asker_name, asker_email)
-- VALUES ('97', 'does this postgres query work?', '1646675075256', 'MST', 'test@test.net');
-- INSERT INTO questions_sample_temp (product_id, body, date_written, asker_name, asker_email)
-- VALUES ('97', 'does this postgres query work?', '1646675075256', 'MST', 'test@test.net');


-- CREATE TABLE IF NOT EXISTS questions_sample_temp (
--   id text,
--   product_id varchar(15),
--   body text,
--   date_written text,
--   asker_name varchar(50),
--   asker_email varchar(255),
--   reported boolean,
--   helpful varchar(15)
-- );

-- COPY questions_sample_temp
-- FROM '/Users/mtanaka/HackReactor/SDC_data/questions_sample.csv'
-- DELIMITER ','
-- CSV HEADER;

-- CREATE TABLE IF NOT EXISTS questions_sample (
--   question_id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
--   product_id varchar(15) NOT NULL,
--   question_body text NOT NULL,
--   date_written text NOT NULL,
--   asker_name varchar(50) NOT NULL,
--   asker_email varchar(255) NOT NULL,
--   reported boolean NOT NULL,
--   helpful varchar(15) NOT NULL
-- );

-- INSERT INTO questions_sample (product_id, question_body, date_written, asker_name, asker_email, reported, helpful)
-- SELECT product_id, body, date_written, asker_name, asker_email, reported, helpful
-- FROM questions_sample_temp;

-- INSERT INTO questions_sample (product_id, question_body, date_written, asker_name, asker_email, reported, helpful)
-- VALUES ('97', 'does this postgres query work?', '1646675075256', 'MST', 'test@test.net', '0', '0');

-- select rtrim(ltrim('["website1.com", "website2.com", "website3.com"]', '['), ']');


-- select rtrim(ltrim('["website1.com",
--     "website2.com",
--     "website3.com"
--     ]', '['), ']');

-- select btrim('["website1.com", "website2.com", "website3.com"]', '[]');
-- select btrim('["website1.com",
--     "website2.com",
--     "website3.com"
--     ]', '[]');



--     select string_to_array(btrim('["website1.com", "website2.com", "website3.com"]', '[]'), ',');


--     select replace(btrim('["website1.com", "website2.com", "website3.com"]', '[]'), '''', '')









-- select replace(replace(btrim('["website1.com", "website2.com", "website3.com"]', '[]'), '''', ''), '"', '');

-- select string_to_array(replace(replace(btrim('["website1.com", "website2.com", "website3.com"]', '[]'), '''', ''), '"', ''), ', ');

-- select unnest(string_to_array(replace(replace(btrim('["website1.com", "website2.com", "website3.com"]', '[]'), '''', ''), '"', ''), ', '));

-- select json_array_elements_text(["website1.com", "website2.com", "website3.com"]::jsonb);

-- TO_CHAR (TO_TIMESTAMP(date::double precision/1000), 'DD-MM-YYYY"T"HH24:MI:SS.MSTZ')
-- SELECT TO_CHAR (TO_TIMESTAMP(1646718736738::double precision/1000), 'DD-MM-YYYY"T"HH24:MI:SS.MSOF');
-- SELECT TO_CHAR (TO_TIMESTAMP(1646718736738::double precision/1000) AT TIME ZONE 'UTC', 'DD-MM-YYYY"T"HH24:MI:SS.MSOF');